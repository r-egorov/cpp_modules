#include "ShrubberyCreationForm.hpp"

std::string const	ShrubberyCreationForm::trees[3] = 
{
	"	                                              .\n" \
	"                                   .         ;\n" \
	"      .              .              ;%     ;;\n" \
	"        ,           ,                :;%  %;\n" \
	"         :         ;                   :;%;'     .,\n" \
	",.        %;     %;            ;        %;'    ,;\n" \
	"  ;       ;%;  %%;        ,     %;    ;%;    ,%'\n" \
	"   %;       %;%;      ,  ;       %;  ;%;   ,%;'\n" \
	"    ;%;      %;        ;%;        % ;%;  ,%;'\n" \
	"     `%;.     ;%;     %;'         `;%%;.%;'\n" \
	"      `:;%.    ;%%. %@;        %; ;@%;%'\n" \
	"         `:%;.  :;bd%;          %;@%;'\n" \
	"           `@%:.  :;%.         ;@@%;'\n" \
	"             `@%.  `;@%.      ;@@%;\n" \
	"               `@%%. `@%%    ;@@%;\n" \
	"                 ;@%. :@%%  %@@%;\n" \
	"                   %@bd%%%bd%%:;\n" \
	"                     #@%%%%%:;;\n" \
	"                     %@@%%%::;\n" \
	"                     %@@@%(o);  . '\n" \
	"                     %@@@o%;:(.,'\n" \
	"                 `.. %@@@o%::;\n" \
	"                    `)@@@o%::;\n" \
	"                     %@@(o)::;\n" \
	"                    .%@@@@%::;\n" \
	"                    ;%@@@@%::;.\n" \
	"                   ;%@@@@%%:;;;.\n" \
	"               ...;%@@@@@%%:;;;;,..\n",

	"               ,@@@@@@@,                  \n" \
	"       ,,,.   ,@@@@@@/@@,  .oo8888o.      \n" \
	"    ,&%%&%&&%,@@@@@/@@@@@@,8888\\88/8o     \n" \
	"   ,%&\\%&&%&&%,@@@\\@@@/@@@88\\88888/88'    \n" \
	"   %&&%&%&/%&&%@@\\@@/ /@@@88888\\88888'    \n" \
	"   %&&%/ %&%%&&@@\\ V /@@' `88\\8 `/88'     \n" \
	"   `&%\\ ` /%&'    |.|        \\ '|8'       \n" \
	"       |o|        | |         | |         \n" \
	"       |.|        | |         | |         \n" \
	"    \\\\/ ._\\//_/__/  ,\\_//__\\\\/.  \\_//__/_ \n",

	"###########################'`################################\n" \
	"###########################  V##'############################\n" \
	"#########################V'  `V  ############################\n" \
	"########################V'      ,############################\n" \
	"#########`#############V      ,A###########################V\n" \
	"########' `###########V      ,###########################V',#\n" \
	"######V'   ###########l      ,####################V~~~~'',###\n" \
	"#####V'    ###########l      ##P' ###########V~~'   ,A#######\n" \
	"#####l      d#########l      V'  ,#######V~'       A#########\n" \
	"#####l      ##########l         ,####V''         ,###########\n" \
	"#####l        `V######l        ,###V'   .....;A##############\n" \
	"#####A,         `######A,     ,##V' ,A#######################\n" \
	"#######A,        `######A,    #V'  A########'''''##########''\n" \
	"##########,,,       `####A,           `#''           '''  ,,,\n" \
	"#############A,                               ,,,     ,######\n" \
	"######################oooo,                 ;####, ,#########\n" \
	"##################P'                   A,   ;#####V##########\n" \
	"#####P'    ''''       ,###             `#,     `V############\n" \
	"##P'                ,d###;              ##,       `V#########\n" \
	"##########A,,   #########A              )##,    ##A,..,ooA###\n" \
	"#############A, Y#########A,            )####, ,#############\n" \
	"###############A ############A,        ,###### ##############\n" \
	"###############################       ,#######V##############\n" \
	"###############################      ,#######################\n" \
	"##############################P    ,d########################\n" \
	"##############################'    d#########################\n" \
	"##############################     ##########################\n" \
	"##############################     ##########################\n" \
	"#############################P     ##########################\n" \
	"#############################'     ##########################\n" \
	"############################P      ##########################\n" \
	"###########################P'     ;##########################\n" \
	"###########################'     ,###########################\n" \
	"##########################       ############################\n" \
	"#########################       ,############################\n" \
	"########################        d###########P'    `Y#########\n" \
	"#######################        ,############        #########\n" \
	"######################        ,#############        #########\n" \
	"#####################        ,##############b.    ,d#########\n" \
	"####################        ,################################\n" \
	"###################         #################################\n" \
	"##################          #######################P'  `V##P'\n" \
	"#######P'     `V#           ###################P'\n" \
	"#####P'                    ,#################P'\n" \
	"###P'                      d##############P''\n" \
	"##P'                       V##############'\n" \
	"#P'                         `V###########'\n" \
	"#'                             `V##P'\n"
};

ShrubberyCreationForm::ShrubberyCreationForm(void) :
	Form("Shrubbery Creation Form", 145, 137), target("default") {}

ShrubberyCreationForm::ShrubberyCreationForm(std::string target) :
	Form("Shrubbery Creation Form", 145, 137), target(target) {}

ShrubberyCreationForm::~ShrubberyCreationForm(void) {}

ShrubberyCreationForm::ShrubberyCreationForm(ShrubberyCreationForm const &obj):
	Form(obj), target(obj.target) {}

ShrubberyCreationForm	&ShrubberyCreationForm::operator = (ShrubberyCreationForm const &obj)
{
	if (this == &obj)
		return (*this);
	new(this)ShrubberyCreationForm(obj.target);
	return (*this);
}

const char			*ShrubberyCreationForm::FailedToOpenException::what(void)
					const throw()
{
	return ("Failed to open the file");
}

const char			*ShrubberyCreationForm::FailedToWriteException::what(void)
					const throw()
{
	return ("Failed to write in the file");
}

void				ShrubberyCreationForm::execute(Bureaucrat const &bur) const
{
	std::ofstream		target_file;
	
	Form::execute(bur);
	target_file.open(this->target + "_shrubbery", std::ofstream::trunc);
	if (!target_file.is_open() || target_file.bad())
	{
		throw FailedToOpenException();
	}
	else
	{
		for (int i = 0; i < 3; i++)
		{
			target_file << this->trees[i];
			if (target_file.bad())
			{
				target_file << std::endl;
				target_file.close();
				throw FailedToWriteException();
			}
		}
		target_file << std::endl;
		target_file.close();
	}
}
